// Generated by Dagger (https://dagger.dev).
package com.ml.android.challenge.di;

import android.app.Application;
import com.ml.android.challenge.data.CharacterRepository;
import com.ml.android.challenge.data.EpisodeRepository;
import com.ml.android.challenge.data.LocalCharacterDataSource;
import com.ml.android.challenge.data.RemoteCharacterDataSource;
import com.ml.android.challenge.data.RemoteEpisodeDataSource;
import com.ml.android.challenge.data.di.RepositoryModule;
import com.ml.android.challenge.data.di.RepositoryModule_CharacterRepositoryProviderFactory;
import com.ml.android.challenge.data.di.RepositoryModule_EpisodeRepositoryProviderFactory;
import com.ml.android.challenge.databasemanager.CharacterDatabase;
import com.ml.android.challenge.databasemanager.di.DatabaseModule;
import com.ml.android.challenge.databasemanager.di.DatabaseModule_DatabaseProviderFactory;
import com.ml.android.challenge.databasemanager.di.DatabaseModule_LocalCharacterDataSourceProviderFactory;
import com.ml.android.challenge.presentation.CharacterDetailViewModel;
import com.ml.android.challenge.presentation.CharacterListViewModel;
import com.ml.android.challenge.presentation.FavoriteListViewModel;
import com.ml.android.challenge.requestmanager.CharacterRequest;
import com.ml.android.challenge.requestmanager.EpisodeRequest;
import com.ml.android.challenge.requestmanager.di.APIModule;
import com.ml.android.challenge.requestmanager.di.APIModule_BaseUrlProviderFactory;
import com.ml.android.challenge.requestmanager.di.APIModule_CharacterRequestProviderFactory;
import com.ml.android.challenge.requestmanager.di.APIModule_EpisodeRequestProviderFactory;
import com.ml.android.challenge.requestmanager.di.APIModule_RemoteCharacterDataSourceProviderFactory;
import com.ml.android.challenge.requestmanager.di.APIModule_RemoteEpisodeDataSourceProviderFactory;
import com.ml.android.challenge.usecases.GetAllCharactersUseCase;
import com.ml.android.challenge.usecases.GetAllFavoriteCharactersUseCase;
import com.ml.android.challenge.usecases.GetEpisodeFromCharacterUseCase;
import com.ml.android.challenge.usecases.GetFavoriteCharacterStatusUseCase;
import com.ml.android.challenge.usecases.UpdateFavoriteCharacterStatusUseCase;
import com.ml.android.challenge.usecases.di.UseCaseModule;
import com.ml.android.challenge.usecases.di.UseCaseModule_GetAllCharacterUseCaseProviderFactory;
import com.ml.android.challenge.usecases.di.UseCaseModule_GetAllFavoriteCharactersUseCaseProviderFactory;
import com.ml.android.challenge.usecases.di.UseCaseModule_GetEpisodeFromCharacterUseCaseProviderFactory;
import com.ml.android.challenge.usecases.di.UseCaseModule_GetFavoriteCharacterStatusUseCaseProviderFactory;
import com.ml.android.challenge.usecases.di.UseCaseModule_UpdateFavoriteCharacterStatusUseCaseProviderFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerChallengeMLComponent implements ChallengeMLComponent {
  private final APIModule aPIModule;

  private final DatabaseModule databaseModule;

  private final RepositoryModule repositoryModule;

  private final UseCaseModule useCaseModule;

  private Provider<String> baseUrlProvider;

  private Provider<Application> appProvider;

  private Provider<CharacterDatabase> databaseProvider;

  private DaggerChallengeMLComponent(APIModule aPIModuleParam, DatabaseModule databaseModuleParam,
      RepositoryModule repositoryModuleParam, UseCaseModule useCaseModuleParam,
      Application appParam) {
    this.aPIModule = aPIModuleParam;
    this.databaseModule = databaseModuleParam;
    this.repositoryModule = repositoryModuleParam;
    this.useCaseModule = useCaseModuleParam;
    initialize(aPIModuleParam, databaseModuleParam, repositoryModuleParam, useCaseModuleParam, appParam);
  }

  public static ChallengeMLComponent.Factory factory() {
    return new Factory();
  }

  private CharacterRequest getCharacterRequest() {
    return APIModule_CharacterRequestProviderFactory.characterRequestProvider(aPIModule, baseUrlProvider.get());}

  private RemoteCharacterDataSource getRemoteCharacterDataSource() {
    return APIModule_RemoteCharacterDataSourceProviderFactory.remoteCharacterDataSourceProvider(aPIModule, getCharacterRequest());}

  private LocalCharacterDataSource getLocalCharacterDataSource() {
    return DatabaseModule_LocalCharacterDataSourceProviderFactory.localCharacterDataSourceProvider(databaseModule, databaseProvider.get());}

  private CharacterRepository getCharacterRepository() {
    return RepositoryModule_CharacterRepositoryProviderFactory.characterRepositoryProvider(repositoryModule, getRemoteCharacterDataSource(), getLocalCharacterDataSource());}

  private GetAllCharactersUseCase getGetAllCharactersUseCase() {
    return UseCaseModule_GetAllCharacterUseCaseProviderFactory.getAllCharacterUseCaseProvider(useCaseModule, getCharacterRepository());}

  private GetAllFavoriteCharactersUseCase getGetAllFavoriteCharactersUseCase() {
    return UseCaseModule_GetAllFavoriteCharactersUseCaseProviderFactory.getAllFavoriteCharactersUseCaseProvider(useCaseModule, getCharacterRepository());}

  private EpisodeRequest getEpisodeRequest() {
    return APIModule_EpisodeRequestProviderFactory.episodeRequestProvider(aPIModule, baseUrlProvider.get());}

  private RemoteEpisodeDataSource getRemoteEpisodeDataSource() {
    return APIModule_RemoteEpisodeDataSourceProviderFactory.remoteEpisodeDataSourceProvider(aPIModule, getEpisodeRequest());}

  private EpisodeRepository getEpisodeRepository() {
    return RepositoryModule_EpisodeRepositoryProviderFactory.episodeRepositoryProvider(repositoryModule, getRemoteEpisodeDataSource());}

  private GetEpisodeFromCharacterUseCase getGetEpisodeFromCharacterUseCase() {
    return UseCaseModule_GetEpisodeFromCharacterUseCaseProviderFactory.getEpisodeFromCharacterUseCaseProvider(useCaseModule, getEpisodeRepository());}

  private GetFavoriteCharacterStatusUseCase getGetFavoriteCharacterStatusUseCase() {
    return UseCaseModule_GetFavoriteCharacterStatusUseCaseProviderFactory.getFavoriteCharacterStatusUseCaseProvider(useCaseModule, getCharacterRepository());}

  private UpdateFavoriteCharacterStatusUseCase getUpdateFavoriteCharacterStatusUseCase() {
    return UseCaseModule_UpdateFavoriteCharacterStatusUseCaseProviderFactory.updateFavoriteCharacterStatusUseCaseProvider(useCaseModule, getCharacterRepository());}

  @SuppressWarnings("unchecked")
  private void initialize(final APIModule aPIModuleParam, final DatabaseModule databaseModuleParam,
      final RepositoryModule repositoryModuleParam, final UseCaseModule useCaseModuleParam,
      final Application appParam) {
    this.baseUrlProvider = DoubleCheck.provider(APIModule_BaseUrlProviderFactory.create(aPIModuleParam));
    this.appProvider = InstanceFactory.create(appParam);
    this.databaseProvider = DoubleCheck.provider(DatabaseModule_DatabaseProviderFactory.create(databaseModuleParam, appProvider));
  }

  @Override
  public CharacterListComponent inject(CharacterListModule module) {
    Preconditions.checkNotNull(module);
    return new CharacterListComponentImpl(module);
  }

  @Override
  public FavoriteListComponent inject(FavoriteListModule module) {
    Preconditions.checkNotNull(module);
    return new FavoriteListComponentImpl(module);
  }

  @Override
  public CharacterDetailComponent inject(CharacterDetailModule module) {
    Preconditions.checkNotNull(module);
    return new CharacterDetailComponentImpl(module);
  }

  private static final class Factory implements ChallengeMLComponent.Factory {
    @Override
    public ChallengeMLComponent create(Application app) {
      Preconditions.checkNotNull(app);
      return new DaggerChallengeMLComponent(new APIModule(), new DatabaseModule(), new RepositoryModule(), new UseCaseModule(), app);
    }
  }

  private final class CharacterListComponentImpl implements CharacterListComponent {
    private final CharacterListModule characterListModule;

    private CharacterListComponentImpl(CharacterListModule module) {
      this.characterListModule = module;
    }

    @Override
    public CharacterListViewModel getCharacterListViewModel() {
      return CharacterListModule_CharacterListViewModelProviderFactory.characterListViewModelProvider(characterListModule, DaggerChallengeMLComponent.this.getGetAllCharactersUseCase());}
  }

  private final class FavoriteListComponentImpl implements FavoriteListComponent {
    private final FavoriteListModule favoriteListModule;

    private FavoriteListComponentImpl(FavoriteListModule module) {
      this.favoriteListModule = module;
    }

    @Override
    public FavoriteListViewModel getFavoriteListViewModel() {
      return FavoriteListModule_FavoriteListViewModelProviderFactory.favoriteListViewModelProvider(favoriteListModule, DaggerChallengeMLComponent.this.getGetAllFavoriteCharactersUseCase());}
  }

  private final class CharacterDetailComponentImpl implements CharacterDetailComponent {
    private final CharacterDetailModule characterDetailModule;

    private CharacterDetailComponentImpl(CharacterDetailModule module) {
      this.characterDetailModule = module;
    }

    @Override
    public CharacterDetailViewModel getCharacterDetailViewModel() {
      return CharacterDetailModule_CharacterDetailViewModelProviderFactory.characterDetailViewModelProvider(characterDetailModule, DaggerChallengeMLComponent.this.getGetEpisodeFromCharacterUseCase(), DaggerChallengeMLComponent.this.getGetFavoriteCharacterStatusUseCase(), DaggerChallengeMLComponent.this.getUpdateFavoriteCharacterStatusUseCase());}
  }
}
