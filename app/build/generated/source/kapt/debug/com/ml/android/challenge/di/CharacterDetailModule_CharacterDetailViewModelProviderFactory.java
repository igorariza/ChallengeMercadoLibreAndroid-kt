// Generated by Dagger (https://dagger.dev).
package com.ml.android.challenge.di;

import com.ml.android.challenge.presentation.CharacterDetailViewModel;
import com.ml.android.challenge.usecases.GetEpisodeFromCharacterUseCase;
import com.ml.android.challenge.usecases.GetFavoriteCharacterStatusUseCase;
import com.ml.android.challenge.usecases.UpdateFavoriteCharacterStatusUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CharacterDetailModule_CharacterDetailViewModelProviderFactory implements Factory<CharacterDetailViewModel> {
  private final CharacterDetailModule module;

  private final Provider<GetEpisodeFromCharacterUseCase> getEpisodeFromCharacterUseCaseProvider;

  private final Provider<GetFavoriteCharacterStatusUseCase> getFavoriteCharacterStatusUseCaseProvider;

  private final Provider<UpdateFavoriteCharacterStatusUseCase> updateFavoriteCharacterStatusUseCaseProvider;

  public CharacterDetailModule_CharacterDetailViewModelProviderFactory(CharacterDetailModule module,
      Provider<GetEpisodeFromCharacterUseCase> getEpisodeFromCharacterUseCaseProvider,
      Provider<GetFavoriteCharacterStatusUseCase> getFavoriteCharacterStatusUseCaseProvider,
      Provider<UpdateFavoriteCharacterStatusUseCase> updateFavoriteCharacterStatusUseCaseProvider) {
    this.module = module;
    this.getEpisodeFromCharacterUseCaseProvider = getEpisodeFromCharacterUseCaseProvider;
    this.getFavoriteCharacterStatusUseCaseProvider = getFavoriteCharacterStatusUseCaseProvider;
    this.updateFavoriteCharacterStatusUseCaseProvider = updateFavoriteCharacterStatusUseCaseProvider;
  }

  @Override
  public CharacterDetailViewModel get() {
    return characterDetailViewModelProvider(module, getEpisodeFromCharacterUseCaseProvider.get(), getFavoriteCharacterStatusUseCaseProvider.get(), updateFavoriteCharacterStatusUseCaseProvider.get());
  }

  public static CharacterDetailModule_CharacterDetailViewModelProviderFactory create(
      CharacterDetailModule module,
      Provider<GetEpisodeFromCharacterUseCase> getEpisodeFromCharacterUseCaseProvider,
      Provider<GetFavoriteCharacterStatusUseCase> getFavoriteCharacterStatusUseCaseProvider,
      Provider<UpdateFavoriteCharacterStatusUseCase> updateFavoriteCharacterStatusUseCaseProvider) {
    return new CharacterDetailModule_CharacterDetailViewModelProviderFactory(module, getEpisodeFromCharacterUseCaseProvider, getFavoriteCharacterStatusUseCaseProvider, updateFavoriteCharacterStatusUseCaseProvider);
  }

  public static CharacterDetailViewModel characterDetailViewModelProvider(
      CharacterDetailModule instance, GetEpisodeFromCharacterUseCase getEpisodeFromCharacterUseCase,
      GetFavoriteCharacterStatusUseCase getFavoriteCharacterStatusUseCase,
      UpdateFavoriteCharacterStatusUseCase updateFavoriteCharacterStatusUseCase) {
    return Preconditions.checkNotNull(instance.characterDetailViewModelProvider(getEpisodeFromCharacterUseCase, getFavoriteCharacterStatusUseCase, updateFavoriteCharacterStatusUseCase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
